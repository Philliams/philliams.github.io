<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Software Engineering on An Hour A Day</title>
    <link>https://philliams.github.io/tags/software-engineering/</link>
    <description>Recent content in Software Engineering on An Hour A Day</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 10 Sep 2023 12:00:00 +0000</lastBuildDate><atom:link href="https://philliams.github.io/tags/software-engineering/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Principled Development</title>
      <link>https://philliams.github.io/posts/career_5_years/principled_excellence/</link>
      <pubDate>Sun, 10 Sep 2023 12:00:00 +0000</pubDate>
      
      <guid>https://philliams.github.io/posts/career_5_years/principled_excellence/</guid>
      <description>I am a very strong believer in consistency. In fact, I think that consistency is at the heart of any engineering endeavor. Towards this end, I implemented what I call &amp;ldquo;Principled Development&amp;rdquo; into my daily work as a Machine Learning developer.
In this post, &amp;ldquo;Principled Development&amp;rdquo; refects to having a framework of clear and actionable heuristics for making technical decisions, and evaluating designs and implementations. Having a framework for making consistent technical decisions is incredibly valuable, it allows for alignment and a unified technical vision within the team, provides a scaffold for ideologically consistent development over time, and increases overall code quality.</description>
    </item>
    
    <item>
      <title>Generators and Coroutines in Python</title>
      <link>https://philliams.github.io/posts/python_posts/generators_coroutines/</link>
      <pubDate>Tue, 10 May 2022 12:00:00 +0000</pubDate>
      
      <guid>https://philliams.github.io/posts/python_posts/generators_coroutines/</guid>
      <description>Generators and Coroutines are very powerful tools in Python that can help simplify logic, speed up data-intensive programs or provide flexible and re-useable APIs. In this post, we will explore three main concepts in Python : Generators, Coroutines and Cogenerators.
Generators Generators in Python are objects that contain some sort of internal state, and know how to produce the &amp;ldquo;next&amp;rdquo; value in a sequence.
Before we talk about what generators are, we should talk about what problems they can help solve!</description>
    </item>
    
    <item>
      <title>Reproducible software in research using Python - Part 1</title>
      <link>https://philliams.github.io/posts/devops/reproducible_ml_1/</link>
      <pubDate>Sat, 19 Jun 2021 12:00:00 +0000</pubDate>
      
      <guid>https://philliams.github.io/posts/devops/reproducible_ml_1/</guid>
      <description>One of the big issues in Machine Learning research is reproducibility. In fields like biology that have many experimental variables and uncertainties, it is expected that results may be difficult to reproduce due to small sample sizes and the inherent complexity of the research. However, there is no excuse for Machine Learning research to be anything but trivial to reproduce.
In this blog post, I will be demonstrating ways to make the software environment used for an experiment easily replicated as well as ways to add testing as a part of the experimental process to catch errors that might threaten the integrity of the results.</description>
    </item>
    
  </channel>
</rss>
