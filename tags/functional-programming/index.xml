<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Functional Programming on An Hour A Day</title>
    <link>https://philliams.github.io/tags/functional-programming/</link>
    <description>Recent content in Functional Programming on An Hour A Day</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 16 Feb 2021 12:00:00 +0000</lastBuildDate><atom:link href="https://philliams.github.io/tags/functional-programming/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Monads in Python</title>
      <link>https://philliams.github.io/posts/functional_programming/python_monads/</link>
      <pubDate>Tue, 16 Feb 2021 12:00:00 +0000</pubDate>
      
      <guid>https://philliams.github.io/posts/functional_programming/python_monads/</guid>
      <description>Monads are a super interesting and useful design pattern often seen in functional programming languages such as Haskell. That being said, it is pretty simple to implement our own monads in Python.
When talking about Monads, there are three &amp;ldquo;main&amp;rdquo; things that I use to describe in practical terms what a Monad is and what it does:
Monads are essentially containers for values. In other words, you will have a Monad that will contain some arbitrary value or variable.</description>
    </item>
    
    <item>
      <title>Decorators in Python</title>
      <link>https://philliams.github.io/posts/python_posts/python_decorators/</link>
      <pubDate>Mon, 01 Feb 2021 12:00:00 +0000</pubDate>
      
      <guid>https://philliams.github.io/posts/python_posts/python_decorators/</guid>
      <description>Decorators are an interesting and powerful tool based on some interesting concepts borrowed from functional programming.</description>
    </item>
    
  </channel>
</rss>
