<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Machine Learning on An Hour A Day</title>
    <link>https://philliams.github.io/tags/machine-learning/</link>
    <description>Recent content in Machine Learning on An Hour A Day</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 19 Jun 2021 12:00:00 +0000</lastBuildDate><atom:link href="https://philliams.github.io/tags/machine-learning/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Reproducible software in research using Python - Part 1</title>
      <link>https://philliams.github.io/posts/devops/reproducible_ml_1/</link>
      <pubDate>Sat, 19 Jun 2021 12:00:00 +0000</pubDate>
      
      <guid>https://philliams.github.io/posts/devops/reproducible_ml_1/</guid>
      <description>One of the big issues in Machine Learning research is reproducibility. In fields like biology that have many experimental variables and uncertainties, it is expected that results may be difficult to reproduce due to small sample sizes and the inherent complexity of the research. However, there is no excuse for Machine Learning research to be anything but trivial to reproduce.
In this blog post, I will be demonstrating ways to make the software environment used for an experiment easily replicated as well as ways to add testing as a part of the experimental process to catch errors that might threaten the integrity of the results.</description>
    </item>
    
    <item>
      <title>Implementing Neural Networks in Python</title>
      <link>https://philliams.github.io/posts/machine_learning_basic/neural_network/</link>
      <pubDate>Sat, 23 Jan 2021 12:00:00 +0000</pubDate>
      
      <guid>https://philliams.github.io/posts/machine_learning_basic/neural_network/</guid>
      <description>One of the more interesting Machine Learning models is the Neural Network. A Neural Network is a highly non-linear mathematical model that can be fitted to very complicated datasets, from image classification to text translation. In this blog post, we’ll be implementing our own simple Neural Network library in python, then test how our model performs through a practical example on an image classification dataset.
What is a Neural Network? There are several types of Neural Networks, however we will be examining the simplest variant : a simple Feed-Forward Neural Network.</description>
    </item>
    
    <item>
      <title>Implementing Logistic regression in Python</title>
      <link>https://philliams.github.io/posts/machine_learning_basic/logistic_regression/</link>
      <pubDate>Fri, 22 Jan 2021 12:00:00 +0000</pubDate>
      
      <guid>https://philliams.github.io/posts/machine_learning_basic/logistic_regression/</guid>
      <description>One of the simplest Machine Learning algorithms is Logistic Regression. At a conceptual level, there’s not much more to it than some simple calculus, but this algorithm can still be pretty effective in a lot of situations. In this post, we’re going to take a little bit of a look at the math behind Logistic Regression and then implement our own Logistic Regression library in python.
What is Logistic Regression? First of all, when we talk about Machine Learning, we are really talking about curve fitting.</description>
    </item>
    
  </channel>
</rss>
